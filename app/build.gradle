apply plugin: 'com.android.application'
apply plugin: 'spoon'
apply plugin: 'hugo'
apply plugin: 'loglifecycle'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'jdepend'
apply plugin: 'findbugs'


/*
  Project Module metadata, some Project objects are read only but we need to set them for
  a human friendly name/title for our reports so we do this as than we get around the
  default AndroidStudio thing of naming our first app module app.

  For example, even though through Reports displayName are read-only but we can through
  changing xsl and passing vars via ant builder get the header of the report to change to
  reflect our project.ext stuff defined below.
 */
ext {



    //a little groovy syntax sugar and some gradle knowledge gives a nice
    //human style project name rather than default IDE/gradle app name
    ourProjectName = '${rootProject.projectDir.name}'+ '${project.name.capitalize()}'

    ourProjectLead = 'Fred Grott'
    ourProjectDescription = 'basic app showing build script with app source code'
    //javadocFooter = "Copyright 2014-${rootProject.ext.reportBuildDate} by $project.ext.ourProjectLead Apache License 2.0"

    archiveVariant = ['debug','release']
}



android {
    compileSdkVersion rootProject.ext.ourCompileSdkVersion
    buildToolsVersion rootProject.ext.ourBuildToolsVersion



    defaultConfig {
        applicationId "com.grottworkshop.fgbuildtutorialandroid"
        minSdkVersion rootProject.ext.ourMinSdkVersion
        targetSdkVersion rootProject.ext.ourTargetSdkVersion
        versionCode rootProject.ext.ourVersionCode
        versionName "${rootProject.ext.appVersionMajor}.${rootProject.ext.appVersionMinor}.${rootProject.ext.appVersionPatch}"

        buildConfigField "String", "BUILD_TIME", "\"${rootProject.ext.buildTime}\""

        testApplicationId 'com.grottworkshop.fgbuildtutorialandroid.test'
        testInstrumentationRunner 'com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner'
        testHandleProfiling true
        testFunctionalTest true
    }
    /*
    dexOptions already handled and set in subprojects block of root
    build.gradle file
     */


    testOptions {
        resultsDir = rootProject.ext.testOptionsResultsDir

    }

    aaptOptions {
        noCompress 'txt'
        ignoreAssetsPattern "!.svn:!.git:!.ds_store:!*.scc:.*:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"
    }

    signingConfigs {

        release {
            //props stored in gradle.properties at userhome .gradle subfolder

            storeFile file(FREDGROTT_RELEASE_STORE_FILE)
            storePassword FREDGROTT_RELEASE_STORE_PASSWORD
            keyAlias FREDGROTT_RELEASE_KEY_ALIAS
            keyPassword FREDGROTT_RELEASE_KEY_PASSWORD
        }

    }

    /*
    Enables diamond operator, multi-catch, strings in switches for our
    minSdkVersion to compileSdkVersion range.
     */
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    /*
    The android gradle plugin loads a duplicate jacoco plugin thus for
    instrumented unit testing we use the internal duplicate jacoco plugin
    from the android gradle plugin hence only needing the configuration closure.

    Jacoco reports can be generated by rooted emulator with the command:
         $ gradlew createDebugCoverageReport
    Or on rooted connected devices with the command:
         $ gradlew connectedCheck
    Coverage reports will be found in
          build/[reports/coverage
     */
    jacoco {
        version = '0.7.1.20140508213'


    }




    /*
    In normal android mobile dev shops you might have stakeholders that
    you need to show app demos to. I use debug for that purpose, however you can
    init a client build type using debug for that purpose. Remember, it is helpful
    if you rename the apk with appName, build variant, versionCode in the file name and
    of course archive a copy in a zip file with the same file naming scheme.
     */
    buildTypes {

        /*
        We define some buildConfigField defs here to use
         */
        def BOOLEAN = "boolean"
        def TRUE = "true"
        def FALSE = "false"
        def LOG_HTTP_REQUESTS = "LOG_HTTP_REQUESTS"
        def REPORT_CRASHES = "REPORT_CRASHES"
        def ENABLE_VIEW_SERVER = "ENABLE_VIEW_SERVER"
        def ENABLE_SHARING = "ENABLE_SHARING"
        def DEBUG_IMAGES = "DEBUG_IMAGES"


        debug {
            debuggable true
            minifyEnabled false
            // dagger jacaco conflict issue is resolved, dx change after buildtoolsversion 21
            testCoverageEnabled true

            // here we go, versionNameSuffix with build date!
            applicationIdSuffix '.dev'
            versionNameSuffix '-dev-' + rootProject.ext.buildTime

            buildConfigField BOOLEAN, LOG_HTTP_REQUESTS, TRUE
            buildConfigField BOOLEAN, REPORT_CRASHES, FALSE
            buildConfigField BOOLEAN, ENABLE_VIEW_SERVER, TRUE
            buildConfigField BOOLEAN, ENABLE_SHARING, TRUE
            buildConfigField BOOLEAN, DEBUG_IMAGES, TRUE


        }



        release {
            minifyEnabled false

            buildConfigField BOOLEAN, LOG_HTTP_REQUESTS, FALSE
            buildConfigField BOOLEAN, REPORT_CRASHES, TRUE
            buildConfigField BOOLEAN, ENABLE_VIEW_SERVER, FALSE
            buildConfigField BOOLEAN, ENABLE_SHARING, FALSE
            buildConfigField BOOLEAN, DEBUG_IMAGES, FALSE



            /*
            Separate out your proguard rules into files for different areas/groups as it makes it easier to
            update the configurations.
             */
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' , 'proguard-googleplayservices.txt', 'proguard-butterknife.txt','proguard-dagger1.txt','proguard.project.txt'

            applicationIdSuffix '.release'
            versionNameSuffix '-release-' + rootProject.ext.buildTime
            signingConfig signingConfigs.release

        }
    }

    /*
    Lint is already setup as a plugin to iterate over all build variants.
     */
    lintOptions {
        lintConfig file("okio-custom-lint.xml")

        // set to true to turn off analysis progress reporting by lint
        quiet false
        // if true, stop the gradle build if errors are found
        abortOnError false
        // if true, only report errors
        ignoreWarnings true
        // if true, emit full/absolute paths to files with errors (true by default)
        //absolutePaths true
        // if true, check all issues, including those that are off by default
        checkAllWarnings true
        // if true, treat all warnings as errors
        warningsAsErrors true
        // turn off checking the given issue id's
        disable 'TypographyFractions', 'TypographyQuotes'
        // turn on the given issue id's
        enable 'RtlHardcoded', 'RtlCompat', 'RtlEnabled'
        // check *only* the given issue id's
        check 'NewApi', 'InlinedApi'
        // if true, don't include source code lines in the error output
        noLines false
        // if true, show all locations for an error, do not truncate lists, etc.
        showAll true

        // if true, generate a text report of issues (false by default)
        textReport true
        // location to write the output; can be a file or 'stdout'
        textOutput 'stdout'
        // if true, generate an XML report for use by for example Jenkins
        xmlReport false
        // file to write report to (if not specified, defaults to lint-results.xml)
        xmlOutput file("${rootProject.ext.lintReportsDir}/lint-report.xml")
        // if true, generate an HTML report (with issue explanations, sourcecode, etc)
        htmlReport true
        // optional path to report (default will be lint-results.html in the builddir)
        htmlOutput file("${rootProject.ext.lintReportsDir}/lint-report.html")

        // set to true to have all release builds run lint on issues with severity=fatal
        // and abort the build (controlled by abortOnError above) if fatal issues are found
        checkReleaseBuilds true
        // Set the severity of the given issues to fatal (which means they will be
        // checked during release builds (even if the lint target is not included)
        fatal 'NewApi', 'InlineApi'
        // Set the severity of the given issues to error
        error 'Wakelock', 'TextViewEdits'
        // Set the severity of the given issues to warning
        warning 'ResourceAsColor'
        // Set the severity of the given issues to ignore (same as disabling the check)
        ignore 'TypographyQuotes'


    }

}



/*
Reports get generated and placed in build/spoon/${Test_VARIANT} folder.
To instead of running on all connected devices to execute on a specific
set of devices uncomment devices line and replace serial number with the
serial numbers of devices you want to target.
 */
spoon {
    // devices = ['333236E9AE5800EC']
    debug = true
    //className = 'fully.qualified.TestCase'

    //methodName = 'testMyApp'
}





configurations{
    checkstyle
    pmd
    jdepend
    androidJacocoAgent
    androidJacocoAnt
    findbugs
}



dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile rootProject.ext.androidsupportapptcompatv7

    checkstyle rootProject.ext.codeqacheckstyle
    pmd rootProject.ext.codeqapmd
    jdepend rootProject.ext.codeqajdepend
    jdepend rootProject.ext.codeqajdependant
    androidJacocoAgent rootProject.ext.codeqajacoco
    androidJacocoAnt rootProject.ext.codeqajacocoant
    findbugs rootProject.ext.codeqafindbugs


    compile rootProject.ext.retrofit

    compile rootProject.ext.dagger
    compile rootProject.ext.butterknife

    compile rootProject.ext.otto
    compile rootProject.ext.rxjava
    compile rootProject.ext.timber

    compile rootProject.ext.okhttp
    compile rootProject.ext.okio
    compile rootProject.ext.okhttpurlconnection

    debugCompile rootProject.ext.retrofitmock

    provided rootProject.ext.daggercompiler

    androidTestCompile(rootProject.ext.doubleespresso) {
        exclude group: 'com.squareup.dagger', module: 'dagger'
        exclude group: 'com.android.support', module: 'support-v4'

    }
    androidTestCompile rootProject.ext.doubleespressoandroidsupportv4

    androidTestCompile rootProject.ext.assertjandroid
    androidTestCompile rootProject.ext.assertjandroidsupportv4



    androidTestCompile rootProject.ext.mockito
    androidTestCompile rootProject.ext.dexmaker
    androidTestCompile(rootProject.ext.dexmakermockito) {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
        exclude module: 'mockito-core'

    }

    androidTestCompile rootProject.ext.spoonclient

}

/*
Codeqa and Javadocs accounting for sourceSets and productFlavors is pain-in-the-ass
for android gradle plugin versions 1.x.

Codeqa:
         project.sourceSets still has things empty due to the switch from a
         gradle internal class to the new gradle sourceSet model that involves native.
         Thus, we hack/cheat in that we specify src as soruce with include/exclude so
         that all sourceSets that have source get checked. Findbugs and Jdepend
         get constrained to main SourceSet only.

Javadoc:
         We use an array to manually constrain javadoc task generation to only those
         variants that have sources.
 */
